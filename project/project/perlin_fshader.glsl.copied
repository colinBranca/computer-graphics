#version 330

in vec2 uv;
uniform int width;
uniform int height;
uniform int p[512];

out vec3 color;
float random (in vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

float fade(float t) { return t * t * t * (t * (t * 6 - 15) + 10); }
// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);
    float x = fade(f.x);
    float y = fade(f.y);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    //vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, x) +
            (c - a)* y * (1.0 - x) +
            (d - b) * x * y;
}
void main() {
        float frequency = 1.0f / 70.0f;
        //float noise = noise(uv.x * width * frequency, uv.y * height * frequency) * 1.6f;
 	float noise = noise(uv * frequency);
        color = vec3(noise, noise, noise);
}


